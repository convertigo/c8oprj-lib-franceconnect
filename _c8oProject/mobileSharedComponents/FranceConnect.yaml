comment: Drop this component in your login page to enable FranceConnect connections
↓SharedComponent_Event [ngx.components.UISharedComponentEvent-1706630916018]: 
↓Div1 [ngx.components.UIDynamicElement-1707918203411]: 
  beanData: '{"ionBean":"DivTag"}'
  tagName: div
  ↓Heading [ngx.components.UIDynamicTag-1707918129233]: 
    beanData: '{"ionBean":"Heading"}'
    tagName: h5
    ↓some_text [ngx.components.UIText-1707918129232]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:FranceConnect est la solution proposée par l'État pour sécuriser et simplifier la connexion à vos services en ligne.
  ↓Div [ngx.components.UIDynamicElement-1707917807972]: 
    beanData: '{"ionBean":"DivTag"}'
    tagName: div
    ↓Image [ngx.components.UIDynamicElement-1707917839287]: 
      beanData: |
        '{
         "ionBean": "Image",
         "url": "source:{\"filter\":\"Asset\",\"project\":\"lib_FranceConnect\",\"input\":\"\",\"model\":{\"data\":[{\"asset\":\"''assets\\\/FCboutons-10.svg''\"}],\"path\":\"\",\"prefix\":\"\",\"suffix\":\"\",\"custom\":\"\",\"useCustom\":false}}",
         "width": "plain:209px",
         "height": "plain:56px"
        }'
      selfClose: true
      tagName: img
      ↓styleEditor [ngx.components.UIStyle-1707918942356]: 
        styleContent: 
          - xmlizable: 
            - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
            - com.twinsoft.convertigo.beans.common.FormatedContent: 
              →: |
                '	margin: 0px 0px 8px 0px;
                '
    ↓attr [ngx.components.UIControlEvent-1707917938931]: 
      ↓CallSequence [ngx.components.UIDynamicAction-1706630931954]: 
        beanData: '{"ionBean":"CallSequenceAction","requestable":"plain:lib_FranceConnect.getConfiguration"}'
        tagName: CallSequence
        ↓SetGlobal [ngx.components.UIDynamicAction-1708598490137]: 
          beanData: |
            '{
             "ionBean": "SetGlobalAction",
             "Property": "plain:fcConnectedInfo",
             "Value": "script:null"
            }'
          tagName: SetGlobal
          ↓PerformOIDC [ngx.components.UICustomAsyncAction-1708422432196]: 
            actionValue: 
              - xmlizable: 
                - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
                - com.twinsoft.convertigo.beans.common.FormatedContent: 
                  →: |
                    '		
                    		/**
                    	     * Client Side OAuth Login. Calling this method will display the OAuth provider''s
                    	     * login page. When the users authentifies, the login page will be closed and a
                    	     * Server sequence will be called with the acess token provided. The server is responsible
                    	     * for validating the token and to return some user information. The server also uses
                    	     * Set_Authenticated_User step to flag the curent session authenticated.
                    	     *
                    	     * This is a generic client OAuth. each OAuth provider has a specific url to call to trigger
                    	     * the OAuth implicit flow. Here are somme common providers URLs:
                    	     *
                    	     * - Microsoft Azure V2.0 endpoint
                    	     *      url : https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=<your registred app client id>&response_type=id_token+token&scope=openid%20https%3A%2F%2Fgraph.microsoft.com%2FUser.Read&response_mode=fragment&state=12345&nonce=678910
                    	     *      redirectUri : "https://login.live.com/oauth20_desktop.srf"
                    	     *
                    	     * Notes :
                    	     *  This function requires the cordova-plugin-inappbrowser.
                    	     *  This will only work for cordova installed apps.
                    	     *
                    	     * @param url                   The OAuth provider url
                    	     * @param redirectUri           The redirect URI to check
                    	     * @param loginSequence         The server Sequence to be launched to login (Project.Sequence)
                    	     * @param checkTokenSequence    The server Sequence to be used to check if user session is already autenticated (Project.Sequence)
                    	     */
                    	    let doOAuthLogin = function(url: String, redirectUri: String, loginSequence: string, checkTokenSequence: string): Promise<any> {
                    	        return new Promise((resolve, reject) => {
                    	            let win;
                    	            var isABoringBrowser = navigator.vendor && navigator.vendor.indexOf(''Apple'') > -1 && navigator.userAgent && navigator.userAgent.indexOf(''CriOS'') == -1 && navigator.userAgent.indexOf(''FxiOS'') == -1;
                    	            if(isABoringBrowser && window["cordova"] == undefined){
                    	                win = window.open(''about:blank'',"cafLogin", "location=no, clearsessioncache=yes, clearcache=yes");
                    	            }
                    	            page.c8o.callJson(checkTokenSequence).then((data, params) => {
                    	                if (data["notoken"] == "true") {
                    	                    openOAuthLogin(url, redirectUri).then((parsedResponse) => {
                    	                        page.c8o.log.debug("Parsed response is : " + JSON.stringify(parsedResponse));
                    	                        page.c8o.callJsonObject(loginSequence, parsedResponse)
                    	                            .then((data: any) => {
                    	                                if (data["login"] != "ko") {
                    										page.router.sharedObject["fcConnectedInfo"] = data
                    	                                    resolve(data);
                    	                                }
                    	                                else {
                    	                                    reject(data);
                    	                                }
                    	                                return null;
                    	                            }).fail((err) => {
                    	                                reject(err);
                    	                            })
                    	                    }).catch((err) => {
                    	                        reject(err);
                    	                    })
                    	                }
                    	                else {
                    	                    if(isABoringBrowser){
                    	                        win.close();
                    	                    }
                    						// We already have a Token so we are connected , just retrieve conneciton info
                    	                    page.router.sharedObject["fcConnectedInfo"] = data["fcConnectedInfo"]
                    	                    resolve(data);
                    	                    return null;
                    	                }
                    	            }).fail((err) => {
                    	                reject(err);
                    	            });
                    	        });
                    	    }
                    
                    	    let openOAuthLogin = function(url: String, redirectUri: String, isABoringBrowser?, win?): Promise<any> {
                    	        return new Promise((resolve, reject) => {
                    	            if (window["cordova"] != undefined) {
                    	                url += "&redirect_uri=" + redirectUri
                    	                const browserRef = window["cordova"].InAppBrowser.open(
                    	                    url,
                    	                    "_blank",
                    	                    "location=no, clearsessioncache=yes, clearcache=yes"
                    	                );
                    	                let responseParams: string;
                    	                let parsedResponse: Object = {};
                    	                browserRef.addEventListener("loadstart", (evt) => {
                    	                    page.c8o.log.debug("Auth Page loaded")
                    	                    if ((evt.url).indexOf(redirectUri) === 0) {
                    	                        browserRef.removeEventListener("exit", (evt) => { });
                    	                        page.c8o.log.debug("Exit Listener removed")
                    	                        browserRef.close();
                    	                        if (evt.url.indexOf("#") != -1)     // Microsoft Azure
                    	                            responseParams = ((evt.url).split("#")[1]).split("&");
                    	                        else                            // LinkedIN
                    	                            responseParams = ((evt.url).split("?")[1]).split("&");
                    	
                    	                        for (var i = 0; i < responseParams.length; i++) {
                    	                            parsedResponse[responseParams[i].split("=")[0]] = responseParams[i].split("=")[1];
                    	                        }
                    	                        if ((parsedResponse["access_token"] !== undefined &&
                    	                            parsedResponse["access_token"] !== null) || (parsedResponse["code"] !== undefined &&
                    	                                parsedResponse["code"] !== null)) {
                    	                            resolve(parsedResponse);
                    	                        } else {
                    	                            page.c8o.log.error("oAuthClient : oAuth authentication error:" + evt.url)
                    	                            reject("oAuth authentication error");
                    	                        }
                    	                    }
                    	                });
                    	                browserRef.addEventListener("exit", function (evt) {
                    	                    page.c8o.log.debug("Auth Page closed")
                    	                });
                    	            }
                    	            else {
                    	                url += "&redirect_uri=" + redirectUri;
                    	                if(isABoringBrowser){
                    	                    win.location = url;
                    	                }
                    	                else{
                    	                    window.open(url.toString(), "cafLogin", "location=no, clearsessioncache=yes, clearcache=yes");
                    	                }
                    	                
                    	                // poll untill we have our parsed response in local storage...
                    					let intervalId = window.setInterval(function(){
                    						let resp = window.localStorage.getItem("FC-parsedResponse")
                    						if (resp != null) {
                    							window.clearInterval(intervalId)
                    							window.localStorage.removeItem("FC-parsedResponse")
                    	                        resolve(JSON.parse(resp));
                    						}
                    					}, 100);
                    	            }
                    	        });
                    	    }
                    	    
                    	    let randomString = function(length) {
                    		    var text = "";
                    		    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                    		    for(var i = 0; i < length; i++) {
                    		        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    		    }
                    		    return text;
                    		}
                    
                    		try {
                    			page.c8o.log.debug(''[FranceConnect] ''+ props.actionFunction +'': ''+ props.actionName);
                    			
                    			let scope 			= ''openid+family_name+given_name''
                                let response_type 	= ''code''
                                let oAuthUrl 		= vars.AuthorizationEndpoint + ''?'' +
                    	                                ''client_id='' + 		encodeURIComponent(vars.ClientID) +                                             
                    	                                ''&response_type=''+ 	encodeURIComponent(response_type) +                                    
                    	                                ''&scope='' + 		scope +
                    	                                ''&state='' + 		randomString(22) +
                    	                                ''&acr_values=eidas1'' +
                    	                                ''&nonce='' + 		randomString(22);
                                                    
                    			doOAuthLogin(
                    				oAuthUrl,
                    				vars.RedirectURL,
                    				"lib_FranceConnect.loginWithCode",
                    				"lib_FranceConnect.checkAccessOpenID"
                    			)
                    
                    
                    		} catch (e) {
                    			page.c8o.log.error(''[[FranceConnect] ''+ JSON.stringify(e));
                    		} finally {
                    			return;
                    		}
                    '
            ↓ClientID [ngx.components.UIControlVariable-1708422444818]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: source:{"filter":"Sequence","project":"lib_FranceConnect","input":"","model":{"data":[{"sequence":"lib_FranceConnect.getConfiguration","marker":""}],"path":"?.OpenIDClientID","prefix":"","suffix":"","custom":"","useCustom":false}}
            ↓AuthorizationEndpoint [ngx.components.UIControlVariable-1708422444821]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: source:{"filter":"Sequence","project":"lib_FranceConnect","input":"","model":{"data":[{"sequence":"lib_FranceConnect.getConfiguration","marker":""}],"path":"?.AuthorizeEndPoint","prefix":"","suffix":"","custom":"","useCustom":false}}
            ↓RedirectURL [ngx.components.UIControlVariable-1708441320433]: 
              varValue: 
                - xmlizable: 
                  - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
                  - MobileSmartSourceType: source:{"filter":"Sequence","project":"lib_FranceConnect","input":"","model":{"data":[{"sequence":"lib_FranceConnect.getConfiguration","marker":""}],"path":"?.RedirectURI","prefix":"","suffix":"","custom":"","useCustom":false}}
  ↓FormatLayout [ngx.components.UIDynamicAttr-1707918101721]: 
    beanData: '{"ionBean":"FormatLayout","TextAlignment":"plain:ion-text-center"}'
    selfClose: false
    tagName: FormatLayout
  ↓tag [ngx.components.UIElement-1707918808006]: 
    tagName: a
    ↓some_text [ngx.components.UIText-1707918834424]: 
      textValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:Qu'est-ce que FranceConnect ? 
    ↓LinkStyle [ngx.components.UIStyle-1707919335857]: 
      styleContent: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.common.FormatedContent
          - com.twinsoft.convertigo.beans.common.FormatedContent: 
            →: |
              '	text-decoration: underline;
              '
    ↓href [ngx.components.UIAttribute-1707919499791]: 
      attrName: href
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:https://franceconnect.gouv.fr/ 
    ↓target [ngx.components.UIAttribute-1707919532527]: 
      attrName: target
      attrValue: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.ngx.components.MobileSmartSourceType
          - MobileSmartSourceType: plain:_blank